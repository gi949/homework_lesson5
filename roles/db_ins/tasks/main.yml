---
  - name: desable selinux
    command: setenforce 0
    ignore_errors: yes

  - name: download remi-mysql repo
    get_url: 
      url: https://repo.percona.com/yum/percona-release-latest.noarch.rpm
      dest: /tmp/percona-release-latest.noarch.rpm

  - name: instal repo
    ansible.builtin.yum:
      name: /tmp/percona-release-latest.noarch.rpm
      state: present

  - name: instal package db
    ansible.builtin.yum:
      name: Percona-XtraDB-Cluster-57
      state: present
      disable_gpg_check: true

  - name: start db
    ansible.builtin.systemd_service:
      name: mysql
      state: started
      enabled: true

  - name: instal other pakeges
    ansible.builtin.yum:
      name: "{{ item }}"
      state: present
      disable_gpg_check: true
    with_items:
      - gcc-c++
      - MySQL-python

  - name: Check that the somefile.conf exists
    stat:
      path: /root/.my.cnf
    register: stat_result

#  - name: Add server strings
#    ansible.builtin.lineinfile:
#      path: "/etc/percona-xtradb-cluster.conf.d/wsrep.cnf"
#      line: validate_password_special_char_count=0
#    when: not stat_result.stat.exists

  - name: Acquire temporary root password
    shell: "awk -F': ' '$0 ~ \"temporary password\"{print $2}' /var/log/mysqld.log"
    register: mysql_root_password_temp

  - name: Set new root password from default temporary password
    shell: "mysql -e \"SET PASSWORD = 'W2BzcIto3uZ0';\"
           --connect-expired-password -uroot -p'{{ mysql_root_password_temp.stdout }}'
           && touch /root/.my.password.changed"
    args:
      creates: /root/.my.password.changed

#  - name: Ensure root can login into MySQL localhost
#    shell: "mysql -e \"CREATE USER 'root'@'{{ item }}';\" 
#           -uroot -p'W2BzcIto3uZ0'"
#    with_items:
#      - ::1
#      - 127.0.0.1
#      - localhost
#    ignore_errors: yes

  - name: Create/update my.cnf for root user
    template:
      src: my.cnf.j2
      dest: /root/.my.cnf
      owner: root
      group: root
      mode: 0600

  - name: select query UNINSTALL PLUGIN
    community.mysql.mysql_query:
      login_db: mysql
      query: UNINSTALL PLUGIN validate_password;
    ignore_errors: yes

  - name: del server strings
    ansible.builtin.lineinfile:
      path: " /etc/percona-xtradb-cluster.conf.d/wsrep.cnf"
      line: 'validate_password_special_char_count=0'
      state: absent
    ignore_errors: yes

  - name: stop db
    ansible.builtin.systemd_service:
      name: mysql
      state: stopped

  - name: config db1
    template:
      src: percona1.cnf
      dest: /etc/percona-xtradb-cluster.conf.d/wsrep.cnf
    delegate_to: "{{ ipe_db1 }}" 

  - name: start db1
    ansible.builtin.systemd_service:
      name: mysql@bootstrap
      state: started
    delegate_to: "{{ ipe_db1 }}" 

  - name: create user sstuser
    community.mysql.mysql_query:
      login_db: mysql
      query: CREATE USER 'sstuser'@'localhost' IDENTIFIED BY 'passw0rd';
    delegate_to: "{{ ipe_db1 }}"
    ignore_errors: yes

  - name: grant user sstuser
    community.mysql.mysql_query:
      login_db: mysql
      query: GRANT RELOAD, LOCK TABLES, PROCESS, REPLICATION CLIENT ON *.* TO 'sstuser'@'localhost';
    delegate_to: "{{ ipe_db1 }}"
    ignore_errors: yes

  - name: FLUSH PRIVILEGES
    community.mysql.mysql_query:
      login_db: mysql
      query: FLUSH PRIVILEGES;
    delegate_to: "{{ ipe_db1 }}"
    ignore_errors: yes

  - name: config db2
    template:
      src: percona2.cnf
      dest: /etc/percona-xtradb-cluster.conf.d/wsrep.cnf
    delegate_to: "{{ ipe_db2 }}" 

  - name: start db2
    ansible.builtin.systemd_service:
      name: mysql
      state: started
    delegate_to: "{{ ipe_db2 }}" 

  - name: config db3
    template:
      src: percona3.cnf
      dest: /etc/percona-xtradb-cluster.conf.d/wsrep.cnf
    delegate_to: "{{ ipe_db3 }}" 

  - name: start db3
    ansible.builtin.systemd_service:
      name: mysql
      state: started
    delegate_to: "{{ ipe_db3 }}"

  - name: create db wp
    community.mysql.mysql_db:
#      login_user: root
#      login_password: 
      name: "{{ wp_db_name }}"
      state: present
    delegate_to: "{{ ipe_db1 }}"
    ignore_errors: yes
#      collation: utf8mb4_general_ci

  - name: create db user
    community.mysql.mysql_query:
      login_db: mysql
      query: GRANT ALL ON {{ wp_db_user }}.* TO '{{ wp_db_name }}'@'%' IDENTIFIED BY '{{ wp_db_password }}';;
    delegate_to: "{{ ipe_db1 }}"
    ignore_errors: yes
    
  - name: create clustercheckuser  user
    community.mysql.mysql_query:
      login_db: mysql
      query: GRANT PROCESS ON *.* TO 'clustercheckuser'@'localhost' IDENTIFIED BY 'clustercheckpassword!';
    delegate_to: "{{ ipe_db1 }}"
    ignore_errors: yes

  - name: FLUSH PRIVILEGES
    community.mysql.mysql_query:
      login_db: mysql
      query: FLUSH PRIVILEGES;
    delegate_to: "{{ ipe_db1 }}"
    ignore_errors: yes

  - name: instal package xinetd
    ansible.builtin.yum:
      name: xinetd
      state: present

  - name: setting mysqlchk
    copy:
      src: mysqlchk
      dest: /etc/xinetd.d/mysqlchk

  - name: Add mysqlchk strings
    ansible.builtin.lineinfile:
      path: "/etc/services"
      line: 'mysqlchk 9199/tcp'

  - name: start db
    ansible.builtin.systemd_service:
      name: xinetd
      state: restarted
      enabled: true